#+TITLE: Programming Tasks
#+AUTHOR: Benjamin Zaporzan
#+DATE: 2018-04-12
#+EMAIL: benzaporzan@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t


* Documented Function Convention
  You'll notice that Forth tends to include a comment consisting of a
  bracketed list. I'm going to follow the same conventions for naming
  functions in *fif*
  
  - ALL :: fn <name> #_[docstring] <body> endfn

  - name :: EDN Symbol Data Value

  - #_[docstring] :: the "#_" part is a discard dispatch within the
                     EDN language. Docstring is a string explaining
                     the function.

  - docstring :: (input values -- output values) [helpful description]

  - values :: Listed are several value types, which are abbreviated as
              single or double letter lowercase acronymns. This is not
              not necessary, but useful to keep the documentation
              small.

* Standard Library API Reference
  
** Special Symbols
   
   Asterisk '*' -- Word Pointer. Allows you to place Word definitions
   on the stack
   
   ex.

   #+BEGIN_SRC clojure

   

   #+END_SRC

** Not Implemented

  - $stack/empty? :: ( -- bool ) Returns true if the main stack is empty.

  - $stack/clear! :: ( -- ) Clears the main stack. Not recommended.
		     
  - $stack/pop! :: ( any -- ) Redundant function to 'drop. Drops a
                    value on the stack.

  - drop? :: ( any -- bool ) Attempts to drop the first item on the
             stack. If it succeeds, returns true, otherwise returns
             false.

  - into :: ( collection, ... any -- 'collection ) <-$ <data values> $<-

    #+BEGIN_SRC clojure

    (fif/reval () <-into! 1 2 3 !) ;; => '((1 2 3))
  
    (fif/reval [] <-into! [1 2] [3 4] !) ;; => '([[1 2] [3 4]])

    (fif/reval {} <-into! [:x 1] [:y 2] !) ;; => '({:x 1 :y 2})

    (fif/reval {} <-into!
      :x [] <-into! 1 2 3 !
      :y [] <-into! 4 0 do i loop !
     !) ;; '({:x [1 2 3] :y [0 1 2 3 4]})

    (fif/reval
     macro list! _! () <-into! !_ endmacro
     macro dict! _! {} <-into! !_ endmacro
     macro vec! _! [] <-into! !_ endmacro
     macro set! _! #{} <-into! !_ endmacro

     dict!
      :x vec! 1 2 3 ! pair
      :y list! 4 0 do i loop ! pair
     !) ;; => {:x [1 2 3]
               :y (0 1 2 3 4)}

    (fif/reval (0 3 do i loop) apply) ;; => (0 1 2 3)

    (fif/reval [0 3 do i loop] apply) ;; => (0 1 2 3)

    (fif/reval (0 3 do i loop) realize) ;; => ((0 1 2 3))

    (fif/reval [0 3 do i loop] realize) ;; => ([0 1 2 3])

    (fif/reval [[:a (0 4 do i loop) realize]
                [:b (1 2 3)]] realize ->map) ;; => ({:a (0 1 2 3 4) :b (1 2 3)})

    (fif/reval [:first-name "ben" pair
                :last-name "zap" pair] realize ->map) ;; => ({:first-name "ben" :last-name "zap"})

    (fif/reval set! :eggs :bacon :salad !) ;; => (#{:eggs :bacon :salad})

    (fif/reval (1 2) (3 4) into) ;; => '((2 1 3 4))

    #+END_SRC

  - Arrow Functions for pulling data out of collections onto the stack

    #+BEGIN_SRC clojure

    (fif/reval (1 2 3) apply 4 5) ;; => '(1 2 3 4 5)
    
    (fif/reval {:x 1 :y 2} apply :z 3) ;; => '([:x 1] [:y 2] :z 3)

    #+END_SRC

** Programming Tasks
   - Refactor stackmachine into separate files (.impl namespace, etc)
   - Better Test Coverage
   - Make functions go into a #'function-mode
     using :function-mode-flag
     - add 'return word, to prematurely leave a function
     
   - implement asterisk special form, pointer operations
   - implement ampersand special form, concat operations
   - change how variables are created and queried based on asterisk notation
   - remove '! for variable setting

   - Implement collection construction methods
