#+TITLE: Programming Tasks
#+AUTHOR: Benjamin Zaporzan
#+DATE: 2018-04-12
#+EMAIL: benzaporzan@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t


* Documented Function Convention
  You'll notice that Forth tends to include a comment consisting of a
  bracketed list. I'm going to follow the same conventions for naming
  functions in *fif*
  
  - ALL :: fn <name> #_[docstring] <body> endfn

  - name :: EDN Symbol Data Value

  - #_[docstring] :: the "#_" part is a discard dispatch within the
                     EDN language. Docstring is a string explaining
                     the function.

  - docstring :: (input values -- output values) [helpful description]

  - values :: Listed are several value types, which are abbreviated as
              single or double letter lowercase acronymns. This is not
              necessary, but useful to keep the documentation small.

* Standard Library API Reference

** Not Implemented



  - drop? :: ( any -- bool ) Attempts to drop the first item on the
             stack. If it succeeds, returns true, otherwise returns
             false.

    (fif/reval 4 0 do %i loop) ;; => '(0 1 2 3 4)

    (fif/reval 4 0 do %let! x 1 %get! *x loop) ;; => '(1 1 1 1 1)

    #+END_SRC

** Programming Tasks

   - Version 1.0: Add 'fn?' word definition to return true when it's a word definition.

   - Version 1.0: cljs-specific web-repl implementation in vanilla
     cljs
     - prepl implementation, so it can be easily extended to popular
       component libraries (react, web-components)

   - Version 1.1: implement more higher-order clojure functions that accept
     functions.

   - Version 1.1: implement ampersand special form, concat operations

   - Version 1.1: implement percent special form, for stash operations (?)

   - Version 1.1: implement 'foreach 'endfor
     (reval [1 2 3 4] foreach %elem inc endfor) ;; => (2 3 4 5)

   - Version 1.1: Make functions go into a #'function-mode
     using :function-mode-flag
     - add 'return word, to prematurely leave a function

   - Version 1.2: Implement shell functionality for use with potential
     console shell
     - dash-prefixed symbols have special meaning, can be used to
       construct option maps seen by the next word function
       called.
     (reval -h ls) ;; Similar to `see ls`, but specific to `ls` as an
     optional argument.

     - The dash prefixed symbols get placed within a special symbol $,
       which can be accessed by any preceding word
       definitions. Clearing of this symbol is done via another
       special symbol $$

     #+BEGIN_SRC fif
     fn ls 
       $ get :h true? if
         ;; note the use of function 'return' (not implemented at the time of proposal)
         display-ls-help return
       then

       $ get :v true? if
         let verbose? true
       else
         let verbose? false
       then

       ;; normal operation
       ;; ...

       ;; we've processed the optional arguments, so let's clear it
       $$

     endfn
     #+END_SRC

     - Single-dash with a single lower-case or upper-case valid edn
       letter symbol will place a keyval of that letter in the special
       $ map with a value of `true`. Additional letters included will
       be treated as separate keyval entries into the special $ map.

       ex.

       -v $ println ;; {:v true}

       -vh $ println ;; {:v true :h true}
       
       -v -h $ println ;; {:v true :h true}

       - Double-dash with a valid edn symbol will place the full keyval
         symbol within the $ map with a value of `true`.

	 ex.

         --verbose $ println ;; {:verbose true}

         --help --verbose $ println ;; {:help true :verbose true}

       - Padding in arguments through the $ map is done used an
         equal-sign suffix. The value preceding will then be placed in
         the $ special map as the value. The same holds true for
         double-dashed entries.

	 -p= "./logs" $ println ;; {:p "./logs"}

	 -vp= "./logs" $ println ;; {:v true :p "./logs"}

	 --path= "./logs" $ println ;; {:path "./logs"}

	 ;; Putting it altogether

	 --path= "./" -lh ls

         ;; calls `ls` on the given :path. Additionally shows it as a
         ;; list, and makes it human-readable.

